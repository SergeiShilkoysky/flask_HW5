"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
üìå –°–æ–∑–¥–∞—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
–¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä Jinja –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è HTML
—Å—Ç—Ä–∞–Ω–∏—Ü—ã.
üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å User —Å –ø–æ–ª—è–º–∏ id, name, email –∏ password.
üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ users –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
üìå –°–æ–∑–¥–∞–π—Ç–µ HTML —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω
—Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è
–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ—Ç–æ–¥ GET).
üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä Jinja.
"""

import logging
import uvicorn
from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
from starlette.responses import HTMLResponse
from starlette.templating import Jinja2Templates

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()
templates = Jinja2Templates(directory='templates')


class UserIn(BaseModel):
    name: str
    email: str
    password: str


class User(UserIn):
    id: int
    # is_active: bool = False


lst_users = []
for i in range(10):
    lst_users.append(User(id=i, name=f'user0{i + 1}', email=f'user0{i + 1}mail@gmail.com',
                          password=f'{i + 1}00000'))


# print(lst_users)


@app.get('/', response_class=HTMLResponse)
async def root(request: Request):
    logger.info('–æ—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å on main page')
    return templates.TemplateResponse('base.html', {'request': request})


# @app.get('/', response_class=HTMLResponse)
@app.get('/users/', response_class=HTMLResponse)
async def get_users(request: Request):
    logger.info('–æ—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    # return templates.TemplateResponse('users_bd.html', {'request': request, 'lst_users': lst_users})
    return templates.TemplateResponse('users.html', {'request': request, 'lst_users': lst_users})


@app.get('/get-users-swagger/')
async def get_users_swagger():
    logger.info('–æ—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å–ø. Swagger')
    return {'lst_users': lst_users}
    # return lst_users


@app.get('/get-user-one/{id}', response_model=dict)
async def get_user_one(id: int):
    for user in lst_users:
        if user.id == id:
            logger.info('–æ—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ. –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ id')
            # return {'user': user}
            return user.dict()
    raise ValueError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')


@app.post('/users/add-user', response_model=User)
async def add_user_swagger(new_user: UserIn):
    new_user_id = lst_users[-1].id + 1
    new_user = User(id=new_user_id, **new_user.model_dump())
    # new_user = User(id=new_user_id, name=new_user.name, email=new_user.email, password=new_user.password)
    lst_users.append(new_user)
    logger.info('–æ—Ç—Ä–∞–±–æ—Ç–∞–ª POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    return new_user.dict()


# @app.get("/add_user/", response_class=HTMLResponse)
# async def add_user(request: Request):
#     return templates.TemplateResponse('user_add.html', {'request': request})


@app.put('/users/update-user{usr_id}', response_model=User)
async def update_user(usr_id: int, edit_user: UserIn):
    for user in lst_users:
        if user.id == usr_id:
            user.name = edit_user.name
            user.email = edit_user.email
            user.password = edit_user.password
            logger.info(f'–æ—Ç—Ä–∞–±–æ—Ç–∞–ª PUT –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            return user.model_dump()
    raise HTTPException(status_code=404, detail='User not found')


@app.delete("/users/delete-user/{usr_id}")
async def delete_user(usr_id: int):
    for user in lst_users:
        if user.id == usr_id:
            lst_users.remove(user)
            logger.info(f'–æ—Ç—Ä–∞–±–æ—Ç–∞–ª DELETE –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            return lst_users
    raise HTTPException(status_code=404, detail='User not found')


if __name__ == "__main__":
    uvicorn.run("hw5_task6:app", host="127.0.0.1", port=8080)

